const LANG_SETTINGS=Object.freeze({th:{phoneticSymbols:{W:"ʉ",U:"ə",E:"ɛ",O:"ɔ",N:"ŋ"},toneKeys:["1","2","3","4","5"]},cn:{phoneticSymbols:{U:"ü"},toneKeys:["1","4",null,"2","3"]}});const TONE_CONVERT_TABLE=Object.freeze({i:["ī","ì","î","í","ǐ"],e:["ē","è","ê","é","ě"],"ɛ":["ɛ̄","ɛ̀","ɛ̂","ɛ́","ɛ̌"],"ʉ":["ʉ̄","ʉ̀","ʉ̂","ʉ́","ʉ̌"],"ə":["ə̄","ə̀","ə̂","ə́","ə̌"],a:["ā","à","â","á","ǎ"],u:["ū","ù","û","ú","ǔ"],o:["ō","ò","ô","ó","ǒ"],"ɔ":["ɔ̄","ɔ̀","ɔ̂","ɔ́","ɔ̌"],"ü":["ǖ","ǜ","","ǘ","ǚ"]});const TONE_SYMBOLS=Object.freeze(["̄","̀","̂","́","̌"]);export default class Toneletter{constructor(inputElement,settings={lang:"",phoneticSymbols:null,toneKeys:null}){if(!inputElement){throw new Error("`inputElement` must be given")}if(settings.lang===""){throw new Error("`settings.lang` must be given")}if(!["th","cn"].includes(settings.lang)){throw new Error("`settings.lang` must be 'th' or 'cn'")}this.inputElement=inputElement;const phoneticSymbols=settings.phoneticSymbols??LANG_SETTINGS[settings.lang].phoneticSymbols;const toneKeys=settings.toneKeys??LANG_SETTINGS[settings.lang].toneKeys;this.__keyToCallbacks={...this.__createPhoneticSymbolCallbacks(phoneticSymbols),...this.__createToneCallbacks(toneKeys)}}get version(){return"2.0.0"}observe(){this.__onKeyDown.__bound=e=>this.__onKeyDown(e);this.inputElement.addEventListener("keydown",this.__onKeyDown.__bound)}off(){this.inputElement.removeEventListener("keydown",this.__onKeyDown.__bound)}addTone(toneNumber,pressedKey){if(this.__isConvertable(this.__previousCharacter)){this.__insertTone(this.__convertToTone(toneNumber))}else if(pressedKey){this.__insert(pressedKey)}}__createPhoneticSymbolCallbacks(phoneticSymbols){return Object.entries(phoneticSymbols).reduce((accum,[key,symbol])=>{accum[key]=()=>{this.__insert(symbol)};return accum},{})}__createToneCallbacks(toneKeys){return toneKeys.reduce((accum,key,i)=>{if(key){accum[key]=()=>{this.addTone(i,key)}}return accum},{})}__onKeyDown(e){const callback=this.__keyToCallbacks[e.key];if(callback){callback();e.preventDefault();return}}__insert(text){var at=this.__cursorPosition;this.inputElement.value=this.inputElement.value.slice(0,at)+text+this.inputElement.value.slice(at);this.__setCursor(at+text.length)}__insertTone(tone){this.__backspace();this.__insert(tone)}__backspace(){const from=this.__cursorPosition;const length=this.__calcBSLength(from,this.__previousCharacter);this.inputElement.value=this.inputElement.value.slice(0,from-length)+this.inputElement.value.slice(from);this.__setCursor(from-length)}__calcBSLength(position,character){return this.inputElement.value.substring(0,position).split("").reverse().map(this.__removeTone).indexOf(character)+1}get __cursorPosition(){return this.inputElement.selectionEnd}get __previousCharacter(){const position=this.__cursorPosition;const prevChar=this.inputElement.value.charAt(position-1);if(prevChar==="")return prevChar;if(this.__isTone(prevChar)){return this.inputElement.value.charAt(position-2)}return this.__removeTone(prevChar)}__setCursor(position){this.inputElement.focus();this.inputElement.selectionStart=this.inputElement.selectionEnd=position}__isTone(character){return TONE_SYMBOLS.indexOf(character)>-1}__isConvertable(character){return TONE_CONVERT_TABLE[character]!==undefined}__convertToTone(toneNumber){return TONE_CONVERT_TABLE[this.__previousCharacter][toneNumber]}__removeTone(character){for(const vowel in TONE_CONVERT_TABLE){if(TONE_CONVERT_TABLE[vowel].indexOf(character)>-1){return vowel}}return character}}
