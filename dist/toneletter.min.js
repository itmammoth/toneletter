(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Toneletter"] = factory();
	else
		root["Toneletter"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"toneletter","version":"2.0.4","description":"A javascript plugin that allows you to put phonetic/tone symbols into text field.","main":"dist/toneletter.min.js","scripts":{"start":"webpack serve","test":"jest","build":"webpack; cp dist/toneletter.min.js docs/js/","publish":"npm run build & npm publish ./"},"repository":{"type":"git","url":"git+https://github.com/itmammoth/toneletter.git"},"author":"itmammoth@gmail.com","license":"MIT","bugs":{"url":"https://github.com/itmammoth/toneletter/issues"},"homepage":"https://github.com/itmammoth/toneletter#readme","devDependencies":{"@babel/core":"^7.16.5","@babel/preset-env":"^7.16.5","babel-loader":"^8.2.3","jest":"^27.4.4","uglify-js":"^3.14.5","webpack":"^5.65.0","webpack-cli":"^4.9.1","webpack-dev-server":"^4.6.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************!*\
  !*** ./src/toneletter.js ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Toneletter)
/* harmony export */ });
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var packageJson = __webpack_require__(/*! ../package.json */ "./package.json");

var LANG_SETTINGS = Object.freeze({
  th: {
    phoneticSymbols: {
      W: "\u0289",
      // ʉ
      U: "\u0259",
      // ə
      E: "\u025b",
      // ɛ
      O: "\u0254",
      // ɔ
      N: "\u014b" // ŋ

    },
    // tone 1 (ā), tone 2 (à), tone 3 (â), tone 4 (á), tone 5 (ǎ)
    toneKeys: ["1", "2", "3", "4", "5"]
  },
  cn: {
    phoneticSymbols: {
      U: "\u00FC" //ü

    },
    // tone 1 (ā), tone 2 (à), tone 3 (â), tone 4 (á), tone 5 (ǎ)
    toneKeys: ["1", "4", null, "2", "3"]
  }
});
var TONE_CONVERT_TABLE = Object.freeze({
  // i
  "\u0069": ["\u012B", "\u00EC", "\u00EE", "\u00ED", "\u01D0"],
  // e
  "\u0065": ["\u0113", "\u00E8", "\u00EA", "\u00E9", "\u011B"],
  // ɛ
  "\u025B": ["\u025B\u0304", "\u025B\u0300", "\u025B\u0302", "\u025B\u0301", "\u025B\u030C"],
  // ʉ
  "\u0289": ["\u0289\u0304", "\u0289\u0300", "\u0289\u0302", "\u0289\u0301", "\u0289\u030C"],
  // ə
  "\u0259": ["\u0259\u0304", "\u0259\u0300", "\u0259\u0302", "\u0259\u0301", "\u0259\u030C"],
  // a
  "\u0061": ["\u0101", "\u00E0", "\u00E2", "\u00E1", "\u01CE"],
  // u
  "\u0075": ["\u016B", "\u00F9", "\u00FB", "\u00FA", "\u01D4"],
  // o
  "\u006F": ["\u014D", "\u00F2", "\u00F4", "\u00F3", "\u01D2"],
  // ɔ
  "\u0254": ["\u0254\u0304", "\u0254\u0300", "\u0254\u0302", "\u0254\u0301", "\u0254\u030C"],
  // ü
  "\u00FC": ["\u01D6", "\u01DC", "", "\u01D8", "\u01DA"]
});
var TONE_SYMBOLS = Object.freeze(["\u0304", "\u0300", "\u0302", "\u0301", "\u030C"]);
class Toneletter {
  constructor(inputElement) {
    var _settings$phoneticSym, _settings$toneKeys;

    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      lang: "",
      phoneticSymbols: null,
      toneKeys: null
    };

    if (!inputElement) {
      throw new Error("`inputElement` must be given");
    }

    if (settings.lang === "") {
      throw new Error("`settings.lang` must be given");
    }

    if (!["th", "cn"].includes(settings.lang)) {
      throw new Error("`settings.lang` must be 'th' or 'cn'");
    }

    this.inputElement = inputElement;
    var phoneticSymbols = (_settings$phoneticSym = settings.phoneticSymbols) !== null && _settings$phoneticSym !== void 0 ? _settings$phoneticSym : LANG_SETTINGS[settings.lang].phoneticSymbols;
    var toneKeys = (_settings$toneKeys = settings.toneKeys) !== null && _settings$toneKeys !== void 0 ? _settings$toneKeys : LANG_SETTINGS[settings.lang].toneKeys;
    this.__keyToCallbacks = _objectSpread(_objectSpread({}, this.__createPhoneticSymbolCallbacks(phoneticSymbols)), this.__createToneCallbacks(toneKeys));
  }

  static get version() {
    return packageJson.version;
  }

  observe() {
    this.__onKeyDown.__bound = e => this.__onKeyDown(e);

    this.inputElement.addEventListener("keydown", this.__onKeyDown.__bound);
  }

  off() {
    this.inputElement.removeEventListener("keydown", this.__onKeyDown.__bound);
  }

  addTone(toneNumber, pressedKey) {
    if (this.__isConvertable(this.__previousCharacter)) {
      this.__insertTone(this.__convertToTone(toneNumber));
    } else if (pressedKey) {
      this.__insert(pressedKey);
    }
  }

  __createPhoneticSymbolCallbacks(phoneticSymbols) {
    return Object.entries(phoneticSymbols).reduce((accum, _ref) => {
      var [key, symbol] = _ref;

      accum[key] = () => {
        this.__insert(symbol);
      };

      return accum;
    }, {});
  }

  __createToneCallbacks(toneKeys) {
    return toneKeys.reduce((accum, key, i) => {
      if (key) {
        accum[key] = () => {
          this.addTone(i, key);
        };
      }

      return accum;
    }, {});
  }

  __onKeyDown(e) {
    var callback = this.__keyToCallbacks[e.key];

    if (callback) {
      callback();
      e.preventDefault();
      return;
    }
  }

  __insert(text) {
    var at = this.__cursorPosition;
    this.inputElement.value = this.inputElement.value.slice(0, at) + text + this.inputElement.value.slice(at);

    this.__setCursor(at + text.length);
  }

  __insertTone(tone) {
    this.__backspace();

    this.__insert(tone);
  }

  __backspace() {
    var from = this.__cursorPosition;

    var length = this.__calcBSLength(from, this.__previousCharacter);

    this.inputElement.value = this.inputElement.value.slice(0, from - length) + this.inputElement.value.slice(from);

    this.__setCursor(from - length);
  }

  __calcBSLength(position, character) {
    return this.inputElement.value.substring(0, position).split("").reverse().map(this.__removeTone).indexOf(character) + 1;
  }

  get __cursorPosition() {
    return this.inputElement.selectionEnd;
  }

  get __previousCharacter() {
    var position = this.__cursorPosition;
    var prevChar = this.inputElement.value.charAt(position - 1);
    if (prevChar === "") return prevChar; // Skip if the previous character is just a tone symbol

    if (this.__isTone(prevChar)) {
      return this.inputElement.value.charAt(position - 2);
    }

    return this.__removeTone(prevChar);
  }

  __setCursor(position) {
    this.inputElement.focus();
    this.inputElement.selectionStart = this.inputElement.selectionEnd = position;
  }

  __isTone(character) {
    return TONE_SYMBOLS.indexOf(character) > -1;
  }

  __isConvertable(character) {
    return TONE_CONVERT_TABLE[character] !== undefined;
  }

  __convertToTone(toneNumber) {
    return TONE_CONVERT_TABLE[this.__previousCharacter][toneNumber];
  }

  __removeTone(character) {
    for (var vowel in TONE_CONVERT_TABLE) {
      if (TONE_CONVERT_TABLE[vowel].indexOf(character) > -1) {
        return vowel;
      }
    }

    return character;
  }

}
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,