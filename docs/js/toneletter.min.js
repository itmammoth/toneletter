(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Toneletter"] = factory();
	else
		root["Toneletter"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"toneletter","version":"2.0.2","description":"A jQuery plugin that allows you to put phonetic and tone symbols into text field.","main":"dist/toneletter.min.js","scripts":{"start":"webpack serve","test":"jest","build":"webpack; cp dist/toneletter.min.js docs/js/","publish":"npm run build; npm publish ./"},"repository":{"type":"git","url":"git+https://github.com/itmammoth/toneletter.git"},"author":"itmammoth@gmail.com","license":"MIT","bugs":{"url":"https://github.com/itmammoth/toneletter/issues"},"homepage":"https://github.com/itmammoth/toneletter#readme","devDependencies":{"@babel/core":"^7.16.5","@babel/preset-env":"^7.16.5","babel-loader":"^8.2.3","jest":"^27.4.4","uglify-js":"^3.14.5","webpack":"^5.65.0","webpack-cli":"^4.9.1","webpack-dev-server":"^4.6.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************!*\
  !*** ./src/toneletter.js ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Toneletter)
/* harmony export */ });
const packageJson = __webpack_require__(/*! ../package.json */ "./package.json");

const LANG_SETTINGS = Object.freeze({
  th: {
    phoneticSymbols: {
      W: "\u0289",
      // ʉ
      U: "\u0259",
      // ə
      E: "\u025b",
      // ɛ
      O: "\u0254",
      // ɔ
      N: "\u014b" // ŋ

    },
    // tone 1 (ā), tone 2 (à), tone 3 (â), tone 4 (á), tone 5 (ǎ)
    toneKeys: ["1", "2", "3", "4", "5"]
  },
  cn: {
    phoneticSymbols: {
      U: "\u00FC" //ü

    },
    // tone 1 (ā), tone 2 (à), tone 3 (â), tone 4 (á), tone 5 (ǎ)
    toneKeys: ["1", "4", null, "2", "3"]
  }
});
const TONE_CONVERT_TABLE = Object.freeze({
  // i
  "\u0069": ["\u012B", "\u00EC", "\u00EE", "\u00ED", "\u01D0"],
  // e
  "\u0065": ["\u0113", "\u00E8", "\u00EA", "\u00E9", "\u011B"],
  // ɛ
  "\u025B": ["\u025B\u0304", "\u025B\u0300", "\u025B\u0302", "\u025B\u0301", "\u025B\u030C"],
  // ʉ
  "\u0289": ["\u0289\u0304", "\u0289\u0300", "\u0289\u0302", "\u0289\u0301", "\u0289\u030C"],
  // ə
  "\u0259": ["\u0259\u0304", "\u0259\u0300", "\u0259\u0302", "\u0259\u0301", "\u0259\u030C"],
  // a
  "\u0061": ["\u0101", "\u00E0", "\u00E2", "\u00E1", "\u01CE"],
  // u
  "\u0075": ["\u016B", "\u00F9", "\u00FB", "\u00FA", "\u01D4"],
  // o
  "\u006F": ["\u014D", "\u00F2", "\u00F4", "\u00F3", "\u01D2"],
  // ɔ
  "\u0254": ["\u0254\u0304", "\u0254\u0300", "\u0254\u0302", "\u0254\u0301", "\u0254\u030C"],
  // ü
  "\u00FC": ["\u01D6", "\u01DC", "", "\u01D8", "\u01DA"]
});
const TONE_SYMBOLS = Object.freeze(["\u0304", "\u0300", "\u0302", "\u0301", "\u030C"]);
class Toneletter {
  constructor(inputElement, settings = {
    lang: "",
    phoneticSymbols: null,
    toneKeys: null
  }) {
    if (!inputElement) {
      throw new Error("`inputElement` must be given");
    }

    if (settings.lang === "") {
      throw new Error("`settings.lang` must be given");
    }

    if (!["th", "cn"].includes(settings.lang)) {
      throw new Error("`settings.lang` must be 'th' or 'cn'");
    }

    this.inputElement = inputElement;
    const phoneticSymbols = settings.phoneticSymbols ?? LANG_SETTINGS[settings.lang].phoneticSymbols;
    const toneKeys = settings.toneKeys ?? LANG_SETTINGS[settings.lang].toneKeys;
    this.__keyToCallbacks = { ...this.__createPhoneticSymbolCallbacks(phoneticSymbols),
      ...this.__createToneCallbacks(toneKeys)
    };
  }

  static get version() {
    return packageJson.version;
  }

  observe() {
    this.__onKeyDown.__bound = e => this.__onKeyDown(e);

    this.inputElement.addEventListener("keydown", this.__onKeyDown.__bound);
  }

  off() {
    this.inputElement.removeEventListener("keydown", this.__onKeyDown.__bound);
  }

  addTone(toneNumber, pressedKey) {
    if (this.__isConvertable(this.__previousCharacter)) {
      this.__insertTone(this.__convertToTone(toneNumber));
    } else if (pressedKey) {
      this.__insert(pressedKey);
    }
  }

  __createPhoneticSymbolCallbacks(phoneticSymbols) {
    return Object.entries(phoneticSymbols).reduce((accum, [key, symbol]) => {
      accum[key] = () => {
        this.__insert(symbol);
      };

      return accum;
    }, {});
  }

  __createToneCallbacks(toneKeys) {
    return toneKeys.reduce((accum, key, i) => {
      if (key) {
        accum[key] = () => {
          this.addTone(i, key);
        };
      }

      return accum;
    }, {});
  }

  __onKeyDown(e) {
    const callback = this.__keyToCallbacks[e.key];

    if (callback) {
      callback();
      e.preventDefault();
      return;
    }
  }

  __insert(text) {
    var at = this.__cursorPosition;
    this.inputElement.value = this.inputElement.value.slice(0, at) + text + this.inputElement.value.slice(at);

    this.__setCursor(at + text.length);
  }

  __insertTone(tone) {
    this.__backspace();

    this.__insert(tone);
  }

  __backspace() {
    const from = this.__cursorPosition;

    const length = this.__calcBSLength(from, this.__previousCharacter);

    this.inputElement.value = this.inputElement.value.slice(0, from - length) + this.inputElement.value.slice(from);

    this.__setCursor(from - length);
  }

  __calcBSLength(position, character) {
    return this.inputElement.value.substring(0, position).split("").reverse().map(this.__removeTone).indexOf(character) + 1;
  }

  get __cursorPosition() {
    return this.inputElement.selectionEnd;
  }

  get __previousCharacter() {
    const position = this.__cursorPosition;
    const prevChar = this.inputElement.value.charAt(position - 1);
    if (prevChar === "") return prevChar; // Skip if the previous character is just a tone symbol

    if (this.__isTone(prevChar)) {
      return this.inputElement.value.charAt(position - 2);
    }

    return this.__removeTone(prevChar);
  }

  __setCursor(position) {
    this.inputElement.focus();
    this.inputElement.selectionStart = this.inputElement.selectionEnd = position;
  }

  __isTone(character) {
    return TONE_SYMBOLS.indexOf(character) > -1;
  }

  __isConvertable(character) {
    return TONE_CONVERT_TABLE[character] !== undefined;
  }

  __convertToTone(toneNumber) {
    return TONE_CONVERT_TABLE[this.__previousCharacter][toneNumber];
  }

  __removeTone(character) {
    for (const vowel in TONE_CONVERT_TABLE) {
      if (TONE_CONVERT_TABLE[vowel].indexOf(character) > -1) {
        return vowel;
      }
    }

    return character;
  }

}
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ00sUUFBRCxFQUFXO0FBQ3BCLFNBQUszQyxZQUFMLENBQWtCdUQsS0FBbEI7QUFDQSxTQUFLdkQsWUFBTCxDQUFrQndELGNBQWxCLEdBQW1DLEtBQUt4RCxZQUFMLENBQWtCbUQsWUFBbEIsR0FDakNSLFFBREY7QUFFRDs7QUFFRFcsRUFBQUEsUUFBUSxDQUFDVixTQUFELEVBQVk7QUFDbEIsV0FBTy9DLFlBQVksQ0FBQ3FELE9BQWIsQ0FBcUJOLFNBQXJCLElBQWtDLENBQUMsQ0FBMUM7QUFDRDs7QUFFRHpCLEVBQUFBLGVBQWUsQ0FBQ3lCLFNBQUQsRUFBWTtBQUN6QixXQUFPaEQsa0JBQWtCLENBQUNnRCxTQUFELENBQWxCLEtBQWtDYSxTQUF6QztBQUNEOztBQUVEbkMsRUFBQUEsZUFBZSxDQUFDTCxVQUFELEVBQWE7QUFDMUIsV0FBT3JCLGtCQUFrQixDQUFDLEtBQUt3QixtQkFBTixDQUFsQixDQUE2Q0gsVUFBN0MsQ0FBUDtBQUNEOztBQUVEZ0MsRUFBQUEsWUFBWSxDQUFDTCxTQUFELEVBQVk7QUFDdEIsU0FBSyxNQUFNYyxLQUFYLElBQW9COUQsa0JBQXBCLEVBQXdDO0FBQ3RDLFVBQUlBLGtCQUFrQixDQUFDOEQsS0FBRCxDQUFsQixDQUEwQlIsT0FBMUIsQ0FBa0NOLFNBQWxDLElBQStDLENBQUMsQ0FBcEQsRUFBdUQ7QUFDckQsZUFBT2MsS0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsV0FBT2QsU0FBUDtBQUNEOztBQXJKNkIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL1RvbmVsZXR0ZXIvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1RvbmVsZXR0ZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vVG9uZWxldHRlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vVG9uZWxldHRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1RvbmVsZXR0ZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ub25lbGV0dGVyLy4vc3JjL3RvbmVsZXR0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiVG9uZWxldHRlclwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJUb25lbGV0dGVyXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJjb25zdCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUoXCIuLi9wYWNrYWdlLmpzb25cIik7XG5cbmNvbnN0IExBTkdfU0VUVElOR1MgPSBPYmplY3QuZnJlZXplKHtcbiAgdGg6IHtcbiAgICBwaG9uZXRpY1N5bWJvbHM6IHtcbiAgICAgIFc6IFwiXFx1MDI4OVwiLCAvLyDKiVxuICAgICAgVTogXCJcXHUwMjU5XCIsIC8vIMmZXG4gICAgICBFOiBcIlxcdTAyNWJcIiwgLy8gyZtcbiAgICAgIE86IFwiXFx1MDI1NFwiLCAvLyDJlFxuICAgICAgTjogXCJcXHUwMTRiXCIsIC8vIMWLXG4gICAgfSxcbiAgICAvLyB0b25lIDEgKMSBKSwgdG9uZSAyICjDoCksIHRvbmUgMyAow6IpLCB0b25lIDQgKMOhKSwgdG9uZSA1ICjHjilcbiAgICB0b25lS2V5czogW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIl0sXG4gIH0sXG4gIGNuOiB7XG4gICAgcGhvbmV0aWNTeW1ib2xzOiB7XG4gICAgICBVOiBcIlxcdTAwRkNcIiwgLy/DvFxuICAgIH0sXG4gICAgLy8gdG9uZSAxICjEgSksIHRvbmUgMiAow6ApLCB0b25lIDMgKMOiKSwgdG9uZSA0ICjDoSksIHRvbmUgNSAox44pXG4gICAgdG9uZUtleXM6IFtcIjFcIiwgXCI0XCIsIG51bGwsIFwiMlwiLCBcIjNcIl0sXG4gIH0sXG59KTtcblxuY29uc3QgVE9ORV9DT05WRVJUX1RBQkxFID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC8vIGlcbiAgXCJcXHUwMDY5XCI6IFtcIlxcdTAxMkJcIiwgXCJcXHUwMEVDXCIsIFwiXFx1MDBFRVwiLCBcIlxcdTAwRURcIiwgXCJcXHUwMUQwXCJdLFxuICAvLyBlXG4gIFwiXFx1MDA2NVwiOiBbXCJcXHUwMTEzXCIsIFwiXFx1MDBFOFwiLCBcIlxcdTAwRUFcIiwgXCJcXHUwMEU5XCIsIFwiXFx1MDExQlwiXSxcbiAgLy8gyZtcbiAgXCJcXHUwMjVCXCI6IFtcbiAgICBcIlxcdTAyNUJcXHUwMzA0XCIsXG4gICAgXCJcXHUwMjVCXFx1MDMwMFwiLFxuICAgIFwiXFx1MDI1QlxcdTAzMDJcIixcbiAgICBcIlxcdTAyNUJcXHUwMzAxXCIsXG4gICAgXCJcXHUwMjVCXFx1MDMwQ1wiLFxuICBdLFxuICAvLyDKiVxuICBcIlxcdTAyODlcIjogW1xuICAgIFwiXFx1MDI4OVxcdTAzMDRcIixcbiAgICBcIlxcdTAyODlcXHUwMzAwXCIsXG4gICAgXCJcXHUwMjg5XFx1MDMwMlwiLFxuICAgIFwiXFx1MDI4OVxcdTAzMDFcIixcbiAgICBcIlxcdTAyODlcXHUwMzBDXCIsXG4gIF0sXG4gIC8vIMmZXG4gIFwiXFx1MDI1OVwiOiBbXG4gICAgXCJcXHUwMjU5XFx1MDMwNFwiLFxuICAgIFwiXFx1MDI1OVxcdTAzMDBcIixcbiAgICBcIlxcdTAyNTlcXHUwMzAyXCIsXG4gICAgXCJcXHUwMjU5XFx1MDMwMVwiLFxuICAgIFwiXFx1MDI1OVxcdTAzMENcIixcbiAgXSxcbiAgLy8gYVxuICBcIlxcdTAwNjFcIjogW1wiXFx1MDEwMVwiLCBcIlxcdTAwRTBcIiwgXCJcXHUwMEUyXCIsIFwiXFx1MDBFMVwiLCBcIlxcdTAxQ0VcIl0sXG4gIC8vIHVcbiAgXCJcXHUwMDc1XCI6IFtcIlxcdTAxNkJcIiwgXCJcXHUwMEY5XCIsIFwiXFx1MDBGQlwiLCBcIlxcdTAwRkFcIiwgXCJcXHUwMUQ0XCJdLFxuICAvLyBvXG4gIFwiXFx1MDA2RlwiOiBbXCJcXHUwMTREXCIsIFwiXFx1MDBGMlwiLCBcIlxcdTAwRjRcIiwgXCJcXHUwMEYzXCIsIFwiXFx1MDFEMlwiXSxcbiAgLy8gyZRcbiAgXCJcXHUwMjU0XCI6IFtcbiAgICBcIlxcdTAyNTRcXHUwMzA0XCIsXG4gICAgXCJcXHUwMjU0XFx1MDMwMFwiLFxuICAgIFwiXFx1MDI1NFxcdTAzMDJcIixcbiAgICBcIlxcdTAyNTRcXHUwMzAxXCIsXG4gICAgXCJcXHUwMjU0XFx1MDMwQ1wiLFxuICBdLFxuICAvLyDDvFxuICBcIlxcdTAwRkNcIjogW1wiXFx1MDFENlwiLCBcIlxcdTAxRENcIiwgXCJcIiwgXCJcXHUwMUQ4XCIsIFwiXFx1MDFEQVwiXSxcbn0pO1xuXG5jb25zdCBUT05FX1NZTUJPTFMgPSBPYmplY3QuZnJlZXplKFtcbiAgXCJcXHUwMzA0XCIsXG4gIFwiXFx1MDMwMFwiLFxuICBcIlxcdTAzMDJcIixcbiAgXCJcXHUwMzAxXCIsXG4gIFwiXFx1MDMwQ1wiLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvbmVsZXR0ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBpbnB1dEVsZW1lbnQsXG4gICAgc2V0dGluZ3MgPSB7IGxhbmc6IFwiXCIsIHBob25ldGljU3ltYm9sczogbnVsbCwgdG9uZUtleXM6IG51bGwgfVxuICApIHtcbiAgICBpZiAoIWlucHV0RWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGlucHV0RWxlbWVudGAgbXVzdCBiZSBnaXZlblwiKTtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLmxhbmcgPT09IFwiXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBzZXR0aW5ncy5sYW5nYCBtdXN0IGJlIGdpdmVuXCIpO1xuICAgIH1cbiAgICBpZiAoIVtcInRoXCIsIFwiY25cIl0uaW5jbHVkZXMoc2V0dGluZ3MubGFuZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBzZXR0aW5ncy5sYW5nYCBtdXN0IGJlICd0aCcgb3IgJ2NuJ1wiKTtcbiAgICB9XG5cbiAgICB0aGlzLmlucHV0RWxlbWVudCA9IGlucHV0RWxlbWVudDtcbiAgICBjb25zdCBwaG9uZXRpY1N5bWJvbHMgPVxuICAgICAgc2V0dGluZ3MucGhvbmV0aWNTeW1ib2xzID8/IExBTkdfU0VUVElOR1Nbc2V0dGluZ3MubGFuZ10ucGhvbmV0aWNTeW1ib2xzO1xuICAgIGNvbnN0IHRvbmVLZXlzID0gc2V0dGluZ3MudG9uZUtleXMgPz8gTEFOR19TRVRUSU5HU1tzZXR0aW5ncy5sYW5nXS50b25lS2V5cztcbiAgICB0aGlzLl9fa2V5VG9DYWxsYmFja3MgPSB7XG4gICAgICAuLi50aGlzLl9fY3JlYXRlUGhvbmV0aWNTeW1ib2xDYWxsYmFja3MocGhvbmV0aWNTeW1ib2xzKSxcbiAgICAgIC4uLnRoaXMuX19jcmVhdGVUb25lQ2FsbGJhY2tzKHRvbmVLZXlzKSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiBwYWNrYWdlSnNvbi52ZXJzaW9uO1xuICB9XG5cbiAgb2JzZXJ2ZSgpIHtcbiAgICB0aGlzLl9fb25LZXlEb3duLl9fYm91bmQgPSAoZSkgPT4gdGhpcy5fX29uS2V5RG93bihlKTtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9fb25LZXlEb3duLl9fYm91bmQpO1xuICB9XG5cbiAgb2ZmKCkge1xuICAgIHRoaXMuaW5wdXRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX19vbktleURvd24uX19ib3VuZCk7XG4gIH1cblxuICBhZGRUb25lKHRvbmVOdW1iZXIsIHByZXNzZWRLZXkpIHtcbiAgICBpZiAodGhpcy5fX2lzQ29udmVydGFibGUodGhpcy5fX3ByZXZpb3VzQ2hhcmFjdGVyKSkge1xuICAgICAgdGhpcy5fX2luc2VydFRvbmUodGhpcy5fX2NvbnZlcnRUb1RvbmUodG9uZU51bWJlcikpO1xuICAgIH0gZWxzZSBpZiAocHJlc3NlZEtleSkge1xuICAgICAgdGhpcy5fX2luc2VydChwcmVzc2VkS2V5KTtcbiAgICB9XG4gIH1cblxuICBfX2NyZWF0ZVBob25ldGljU3ltYm9sQ2FsbGJhY2tzKHBob25ldGljU3ltYm9scykge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhwaG9uZXRpY1N5bWJvbHMpLnJlZHVjZSgoYWNjdW0sIFtrZXksIHN5bWJvbF0pID0+IHtcbiAgICAgIGFjY3VtW2tleV0gPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX19pbnNlcnQoc3ltYm9sKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwge30pO1xuICB9XG5cbiAgX19jcmVhdGVUb25lQ2FsbGJhY2tzKHRvbmVLZXlzKSB7XG4gICAgcmV0dXJuIHRvbmVLZXlzLnJlZHVjZSgoYWNjdW0sIGtleSwgaSkgPT4ge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBhY2N1bVtrZXldID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkVG9uZShpLCBrZXkpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIF9fb25LZXlEb3duKGUpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuX19rZXlUb0NhbGxiYWNrc1tlLmtleV07XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIF9faW5zZXJ0KHRleHQpIHtcbiAgICB2YXIgYXQgPSB0aGlzLl9fY3Vyc29yUG9zaXRpb247XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPVxuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUuc2xpY2UoMCwgYXQpICtcbiAgICAgIHRleHQgK1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUuc2xpY2UoYXQpO1xuICAgIHRoaXMuX19zZXRDdXJzb3IoYXQgKyB0ZXh0Lmxlbmd0aCk7XG4gIH1cblxuICBfX2luc2VydFRvbmUodG9uZSkge1xuICAgIHRoaXMuX19iYWNrc3BhY2UoKTtcbiAgICB0aGlzLl9faW5zZXJ0KHRvbmUpO1xuICB9XG5cbiAgX19iYWNrc3BhY2UoKSB7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuX19jdXJzb3JQb3NpdGlvbjtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLl9fY2FsY0JTTGVuZ3RoKGZyb20sIHRoaXMuX19wcmV2aW91c0NoYXJhY3Rlcik7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPVxuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUuc2xpY2UoMCwgZnJvbSAtIGxlbmd0aCkgK1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUuc2xpY2UoZnJvbSk7XG4gICAgdGhpcy5fX3NldEN1cnNvcihmcm9tIC0gbGVuZ3RoKTtcbiAgfVxuXG4gIF9fY2FsY0JTTGVuZ3RoKHBvc2l0aW9uLCBjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgLnN1YnN0cmluZygwLCBwb3NpdGlvbilcbiAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLm1hcCh0aGlzLl9fcmVtb3ZlVG9uZSlcbiAgICAgICAgLmluZGV4T2YoY2hhcmFjdGVyKSArIDFcbiAgICApO1xuICB9XG5cbiAgZ2V0IF9fY3Vyc29yUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50LnNlbGVjdGlvbkVuZDtcbiAgfVxuXG4gIGdldCBfX3ByZXZpb3VzQ2hhcmFjdGVyKCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fX2N1cnNvclBvc2l0aW9uO1xuICAgIGNvbnN0IHByZXZDaGFyID0gdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUuY2hhckF0KHBvc2l0aW9uIC0gMSk7XG4gICAgaWYgKHByZXZDaGFyID09PSBcIlwiKSByZXR1cm4gcHJldkNoYXI7XG4gICAgLy8gU2tpcCBpZiB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIGlzIGp1c3QgYSB0b25lIHN5bWJvbFxuICAgIGlmICh0aGlzLl9faXNUb25lKHByZXZDaGFyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50LnZhbHVlLmNoYXJBdChwb3NpdGlvbiAtIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fX3JlbW92ZVRvbmUocHJldkNoYXIpO1xuICB9XG5cbiAgX19zZXRDdXJzb3IocG9zaXRpb24pIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50LnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5pbnB1dEVsZW1lbnQuc2VsZWN0aW9uRW5kID1cbiAgICAgIHBvc2l0aW9uO1xuICB9XG5cbiAgX19pc1RvbmUoY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIFRPTkVfU1lNQk9MUy5pbmRleE9mKGNoYXJhY3RlcikgPiAtMTtcbiAgfVxuXG4gIF9faXNDb252ZXJ0YWJsZShjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gVE9ORV9DT05WRVJUX1RBQkxFW2NoYXJhY3Rlcl0gIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIF9fY29udmVydFRvVG9uZSh0b25lTnVtYmVyKSB7XG4gICAgcmV0dXJuIFRPTkVfQ09OVkVSVF9UQUJMRVt0aGlzLl9fcHJldmlvdXNDaGFyYWN0ZXJdW3RvbmVOdW1iZXJdO1xuICB9XG5cbiAgX19yZW1vdmVUb25lKGNoYXJhY3Rlcikge1xuICAgIGZvciAoY29uc3Qgdm93ZWwgaW4gVE9ORV9DT05WRVJUX1RBQkxFKSB7XG4gICAgICBpZiAoVE9ORV9DT05WRVJUX1RBQkxFW3Zvd2VsXS5pbmRleE9mKGNoYXJhY3RlcikgPiAtMSkge1xuICAgICAgICByZXR1cm4gdm93ZWw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFyYWN0ZXI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwYWNrYWdlSnNvbiIsInJlcXVpcmUiLCJMQU5HX1NFVFRJTkdTIiwiT2JqZWN0IiwiZnJlZXplIiwidGgiLCJwaG9uZXRpY1N5bWJvbHMiLCJXIiwiVSIsIkUiLCJPIiwiTiIsInRvbmVLZXlzIiwiY24iLCJUT05FX0NPTlZFUlRfVEFCTEUiLCJUT05FX1NZTUJPTFMiLCJUb25lbGV0dGVyIiwiY29uc3RydWN0b3IiLCJpbnB1dEVsZW1lbnQiLCJzZXR0aW5ncyIsImxhbmciLCJFcnJvciIsImluY2x1ZGVzIiwiX19rZXlUb0NhbGxiYWNrcyIsIl9fY3JlYXRlUGhvbmV0aWNTeW1ib2xDYWxsYmFja3MiLCJfX2NyZWF0ZVRvbmVDYWxsYmFja3MiLCJ2ZXJzaW9uIiwib2JzZXJ2ZSIsIl9fb25LZXlEb3duIiwiX19ib3VuZCIsImUiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZFRvbmUiLCJ0b25lTnVtYmVyIiwicHJlc3NlZEtleSIsIl9faXNDb252ZXJ0YWJsZSIsIl9fcHJldmlvdXNDaGFyYWN0ZXIiLCJfX2luc2VydFRvbmUiLCJfX2NvbnZlcnRUb1RvbmUiLCJfX2luc2VydCIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2N1bSIsImtleSIsInN5bWJvbCIsImkiLCJjYWxsYmFjayIsInByZXZlbnREZWZhdWx0IiwidGV4dCIsImF0IiwiX19jdXJzb3JQb3NpdGlvbiIsInZhbHVlIiwic2xpY2UiLCJfX3NldEN1cnNvciIsImxlbmd0aCIsInRvbmUiLCJfX2JhY2tzcGFjZSIsImZyb20iLCJfX2NhbGNCU0xlbmd0aCIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwic3Vic3RyaW5nIiwic3BsaXQiLCJyZXZlcnNlIiwibWFwIiwiX19yZW1vdmVUb25lIiwiaW5kZXhPZiIsInNlbGVjdGlvbkVuZCIsInByZXZDaGFyIiwiY2hhckF0IiwiX19pc1RvbmUiLCJmb2N1cyIsInNlbGVjdGlvblN0YXJ0IiwidW5kZWZpbmVkIiwidm93ZWwiXSwic291cmNlUm9vdCI6IiJ9